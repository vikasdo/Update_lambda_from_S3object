name: deploy
env:
  S3_BUCKET_NAME              : "wordnest"
  DE_DEPLOY_PACKAGE_NAME      : "bgjobs_de_package_$(date +%Y%m%d).zip"
  DS_DEPLOY_PACKAGE_NAME      : "bgjobs_ds_package_$(date +%Y%m%d).zip"
  AWS_REGION_NAME             : "us-east-2"
  DS_LAMBDA_LAYER_NAME        : "ds-requirements" 
  PYTHON_ENV_1                : "python3.8"
  DS_CODE_DEPLOY_PACKAGE_NAME : "ds-code.zip"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ main ]
jobs:
  integrate-to-DE-s3:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_ENV_1}}

      - name: Configure AWS credentials from vikas-test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2

      - name: Install DE dependencies
        run: |
          python my_script.py
          python -m pip install --upgrade pip
          pip install -r de_requirements.txt -t .
          zip -r ${{ env.DE_DEPLOY_PACKAGE_NAME }}  ./  -x  *.git* 

      - name: Copy our DE Deployment package to S3 bucket
        run: aws s3 cp ${{ env.DE_DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME}}/
  
  deploy-lambda:
    runs-on: ubuntu-latest
    needs: [integrate-to-DE-s3]

    strategy:
      matrix:
        functions: [ 
          de
        ]

    steps:
      - name: Configure AWS credentials from vikas-test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
          
      - name: deploy lambda
        run: |
          aws lambda update-function-code \
          --function-name ${{ matrix.functions }} \
          --s3-bucket ${{ env.S3_BUCKET_NAME }} \
          --s3-key ${{ env.DE_DEPLOY_PACKAGE_NAME }}

  integrate-to-DS-s3:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2

        - name: Configure AWS credentials from vikas-test account
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: us-east-2

        - name: Install DS dependencies
          run: |
            mkdir python
            python my_script.py
            python -m pip install --upgrade pip
            pip install -r ds_requirements.txt   -t python
            zip -r ${{ env.DS_DEPLOY_PACKAGE_NAME }}  python
            zip -r ${{ env.DS_CODE_DEPLOY_PACKAGE_NAME }} all_packages


        - name: Copy our DS Deployment package to S3 bucket
          run: |
            aws s3 cp ${{ env.DS_DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME}}/
            aws s3 cp ${{ env.DS_CODE_DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME}}/

  add_layer:
    runs-on: ubuntu-latest
    needs: [integrate-to-DS-s3]
    strategy:
      matrix:
        functions: [ 
          ds
        ]

    steps:
      - name: Configure AWS credentials from vikas-test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
      - name: deploy lambda
        run: |
            aws lambda update-function-code \
            --function-name ${{ matrix.functions }} \
            --s3-bucket ${{ env.S3_BUCKET_NAME }} \
            --s3-key ${{ env.DS_CODE_DEPLOY_PACKAGE_NAME }}

      - name: publish layer
        run: |
          aws lambda publish-layer-version \
          --layer-name  ${{ env.DS_LAMBDA_LAYER_NAME }} \
          --content S3Bucket=${{ env.S3_BUCKET_NAME}},S3Key=${{ env.DS_DEPLOY_PACKAGE_NAME}} \
          --compatible-runtimes ${{ env.PYTHON_ENV_1}}

      - name: retrieve layer arn
        run: |
          echo 'ARN<<EOF' >> $GITHUB_ENV
          aws lambda list-layer-versions \
          --layer-name ${{ env.DS_LAMBDA_LAYER_NAME }} \
          --region ${{ env.AWS_REGION_NAME }}  \
          --query LayerVersions[0].LayerVersionArn >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: add layer to the lambda function.
        run: |
          aws lambda update-function-configuration \
          --function-name ${{ matrix.functions }} \
          --layers ${{ env.ARN }}